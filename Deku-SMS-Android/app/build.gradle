plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
	id "com.diffplug.spotless" version "6.20.0"
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.23'

    id("com.gradleup.nmcp").version("0.0.8")
}

import com.android.tools.profgen.ArtProfileKt
import com.android.tools.profgen.ArtProfileSerializer
import com.android.tools.profgen.DexFile

// def keystorePropertiesFile = rootProject.file("keystore.properties")
// def keystoreProperties = new Properties()
// keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def versionsPropertiesFile = rootProject.file("version.properties")
def versionProperties = new Properties()
versionProperties.load(new FileInputStream(versionsPropertiesFile))

def minSdkVersionFromManifest = project.properties['minSdkVersion']

android {
    compileSdk 34
    namespace 'com.afkanerd.deku.DefaultSMS'

    def _versionName = versionProperties['versionName']
    def tagVersion = Integer.parseInt(versionProperties['tagVersion'])

    println(tagVersion)
    println(_versionName)

    defaultConfig {
        applicationId "com.afkanerd.deku"
        minSdk 24
        targetSdk 34
        versionCode tagVersion
        versionName _versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        resourceConfigurations += ["en", "fr", "ru"]
    }

//    buildFeatures {
//        compose true
//    }

//    composeOptions {
//        kotlinCompilerExtensionVersion = "1.1.1"
//    }

    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())

        main {
            jniLibs.srcDirs = ['libs']
            java {
                exclude 'com/afkanerd/deku/Images/Images/'
                /* The holder name I want to excludes its all classes */
            }
            resources {
                srcDirs 'src/main/resources'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
//            minifyEnabled true
//            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

	project.afterEvaluate {
	    tasks.compileReleaseArtProfile.doLast {
            outputs.files.each { file ->
                if (file.name.endsWith(".profm")) {
                    exec {
                        commandLine(
                        "../reproducible-apk-tools/inplace-fix.py",
                        "sort-baseline", file
                        )
                    }
                }
            }
	    }
	}


	project.afterEvaluate {
        tasks.each { task ->
            if (task.name.startsWith("compile") && task.name.endsWith("ReleaseArtProfile")) {
                task.doLast {
                    outputs.files.each { file ->
                        if (file.name.endsWith(".profm")) {
                            println("Sorting ${file} ...")
                            def version = ArtProfileSerializer.valueOf("METADATA_0_0_2")
                            def profile = ArtProfileKt.ArtProfile(file)
                            def keys = new ArrayList(profile.profileData.keySet())
                            def sortedData = new LinkedHashMap()
                            Collections.sort keys, new DexFile.Companion()
                            keys.each { key -> sortedData[key] = profile.profileData[key] }
                            new FileOutputStream(file).with {
                                write(version.magicBytes$profgen)
                                write(version.versionBytes$profgen)
                                version.write$profgen(it, sortedData, "")
                            }
                        }
                    }
                }
            }
        }
    }

}

dependencies {
    implementation project(':smswithoutborders_libsignal-doubleratchet')
    implementation 'androidx.room:room-testing:2.6.1'
    implementation 'androidx.activity:activity:1.9.0'
    def paging_version = "3.3.0"
    def m3 = "1.2.1"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    // optional - Test helpers
    androidTestImplementation "androidx.work:work-testing:2.9.0"
    // alternatively - without Android dependencies for tests
    testImplementation "androidx.paging:paging-common:$paging_version"

    implementation "androidx.work:work-runtime:2.9.0"
    implementation "androidx.work:work-rxjava2:2.9.0"
    // optional - GCMNetworkManager support
    implementation 'androidx.core:core-ktx:1.13.1'
    implementation 'androidx.paging:paging-guava:3.3.0'
    // optional - Multiprocess support
    implementation "androidx.work:work-multiprocess:2.9.0"

    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.android.volley:volley:1.2.1'
    implementation "androidx.core:core:1.13.1"

    implementation 'commons-codec:commons-codec:1.16.0'
    implementation "io.getstream:avatarview-coil:1.0.7"

    implementation "androidx.room:room-runtime:2.6.1"
    implementation "androidx.room:room-paging:2.6.1"
    annotationProcessor "androidx.room:room-compiler:2.6.1"

    implementation "androidx.paging:paging-runtime:$paging_version"

    implementation 'com.googlecode.libphonenumber:libphonenumber:8.13.27'

    implementation 'com.madgag.spongycastle:prov:1.58.0.0'

    implementation 'net.jpountz.lz4:lz4:1.3.0'
    implementation 'androidx.preference:preference:1.2.1'

    implementation 'com.rabbitmq:amqp-client:5.20.0'

    implementation 'org.java-websocket:Java-WebSocket:1.5.5'

    implementation 'com.google.code.gson:gson:2.11.0'

    implementation 'com.budiyev.android:code-scanner:2.1.0'

    implementation 'com.google.android.material:material:1.12.0'

    implementation "androidx.compose.material3:material3:$m3"

    implementation 'com.sun.mail:android-mail:1.6.2'
    implementation 'com.sun.mail:android-activation:1.6.2'

    implementation 'commons-net:commons-net:3.6'

    def fuelVersion = "2.2.1"
    implementation "com.github.kittinunf.fuel:fuel:$fuelVersion" //for JVM
    testImplementation "com.github.kittinunf.fuel:fuel:$fuelVersion" //for JVM
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.8.1-Beta'//

    implementation "com.github.kittinunf.fuel:fuel-android:$fuelVersion" //for Android
    implementation "com.github.kittinunf.fuel:fuel-coroutines:$fuelVersion"

    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0'

    implementation "androidx.startup:startup-runtime:1.1.1"

}

